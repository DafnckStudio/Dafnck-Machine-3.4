[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "cursor-agent"
version = "1.0.0"
description = "AI-powered MCP server for task management and auto rule generation with FastMCP integration"
license = {text = "MIT"}
authors = [
    {name = "Dai Hung Pham", email = "daihungpham@example.com"}
]
maintainers = [
    {name = "Dai Hung Pham", email = "daihungpham@example.com"}
]
keywords = [
    "ai",
    "mcp",
    "task_management",
    "cursor",
    "agent",
    "fastmcp",
    "automation"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Scientific/Engineering :: Artificial Intelligence"
]
requires-python = ">=3.10"
dependencies = [
    # Core dependencies
    "PyYAML>=6.0.1",
    "jsonschema>=4.17.0",
    "psutil>=5.9.0",
    
    # MCP Server dependencies
    "mcp>=1.0.0",
    "fastmcp",
    
    # Code quality tools
    "radon>=6.0.1",
    "bandit>=1.7.5",
    "black>=22.0.0",
    "mypy>=1.5.0",
    "isort>=5.10.0",
    "flake8>=4.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing dependencies
    "pytest>=7.0.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.1",
    "pytest-asyncio>=0.21.0",
    
    # Development tools
    "pre-commit>=3.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.1",
    "pytest-asyncio>=0.21.0",
    "coverage>=7.0.0",
]

[project.urls]
Homepage = "https://github.com/daihungpham/agentic-coding-framework"
Repository = "https://github.com/daihungpham/agentic-coding-framework.git"
Issues = "https://github.com/daihungpham/agentic-coding-framework/issues"

[project.scripts]
cursor-agent-server = "src.mcp_server:main"

[tool.hatch.build.targets.wheel]
packages = ["src", "modules"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/modules",
    "/tests",
    "/pyproject.toml",
    "/requirements.txt",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src", "modules"]
known_third_party = ["fastmcp", "mcp", "yaml", "jsonschema", "psutil"]

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "fastmcp.*",
    "mcp.*",
    "yaml.*",
    "jsonschema.*",
    "psutil.*",
    "radon.*",
    "bandit.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "--cov=src",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "quick: Quick smoke tests for development (< 60 seconds)",
    "unit: Unit tests (1-2 minutes)",
    "integration: Integration tests (2-3 minutes)",
    "slow: Slow tests (skip during development)",
    "mcp: MCP server specific tests",
    "ddd: Domain-driven design tests",
    "yaml: YAML configuration tests",
    "auto_rule: Auto rule generation tests",
    "domain: Domain layer tests",
    "business_rules: Business rules tests",
    "architecture: Architecture validation tests",
    "infrastructure: Infrastructure layer tests",
    "application: Application layer tests",
    "interface: Interface layer tests",
    "migration: Migration integration tests",
    "performance: Performance regression tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Coverage configuration
[tool.coverage.run]
source = ["src", "modules"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Ruff configuration (modern replacement for flake8)
[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]
unfixable = [
    "F841",  # Remove unused variables
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/**/*" = ["ARG", "S101"]  # Allow unused arguments and assert statements in tests

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["src", "modules"]
known-third-party = ["fastmcp", "mcp", "yaml", "jsonschema", "psutil"]

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process_args 

[dependency-groups]
dev = [
    "pytest>=8.4.0",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.2.1",
    "pyyaml>=6.0.2",
]
