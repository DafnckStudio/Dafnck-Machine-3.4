version: '3.8'

services:
  dhafnck-mcp:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    image: dhafnck/mcp-server:latest
    container_name: dhafnck-mcp-server
    restart: unless-stopped
    
    # Port mapping (optional - MCP typically uses stdio)
    ports:
      - "8000:8000"
    
    # Environment variables
    environment:
      # Core MCP Configuration
      - PYTHONPATH=/app/src
      - FASTMCP_LOG_LEVEL=INFO
      - FASTMCP_ENABLE_RICH_TRACEBACKS=0
      
      # Task Management Paths
      - TASKS_JSON_PATH=/data/tasks
      - PROJECTS_FILE_PATH=/data/projects/projects.json
      - CURSOR_RULES_DIR=/data/rules
      - CURSOR_AGENT_DIR_PATH=/app/src/fastmcp
      
      # Supabase Configuration (Optional - set in .env file)
      - SUPABASE_URL=${SUPABASE_URL:-}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY:-}
      - DHAFNCK_TOKEN=${DHAFNCK_TOKEN:-}
    
    # Volume mounts for data persistence
    volumes:
      # Data persistence
      - dhafnck_data:/data
      - dhafnck_logs:/app/logs
      
      # Configuration files (optional - for advanced users)
      - ./config:/app/config:ro
      
      # Development mode: mount source code (comment out for production)
      # - ./src:/app/src:ro
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "from src.fastmcp.server.mcp_entry_point import create_dhafnck_mcp_server; server = create_dhafnck_mcp_server(); tools = server.get_tools(); print('OK' if len(tools) > 0 else exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Security options
    security_opt:
      - no-new-privileges:true
    
    # User specification (matches Dockerfile)
    user: "1000:1000"  # Adjust if needed
    
    # Network mode for MCP (typically stdio, but HTTP available)
    # network_mode: "bridge"

# Named volumes for data persistence
volumes:
  dhafnck_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data
  
  dhafnck_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs

# Optional: Development override
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
---
# docker-compose.dev.yml (development overrides)
version: '3.8'

services:
  dhafnck-mcp:
    build:
      target: builder  # Use builder stage for development
    
    # Development environment variables
    environment:
      - FASTMCP_LOG_LEVEL=DEBUG
      - FASTMCP_ENABLE_RICH_TRACEBACKS=1
    
    # Mount source code for live reload
    volumes:
      - ./src:/app/src:ro
      - ./pyproject.toml:/app/pyproject.toml:ro
      - ./uv.lock:/app/uv.lock:ro
    
    # Development command (with auto-reload if supported)
    command: ["python", "-m", "fastmcp.server.mcp_entry_point"]
    
    # Remove resource limits for development
    deploy:
      resources: {} 