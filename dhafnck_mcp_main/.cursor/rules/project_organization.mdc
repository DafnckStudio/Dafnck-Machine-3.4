---
description: 
globs: 
alwaysApply: false
---
# Project Organization Guide

**Project**: dhafnck_mcp_main - Advanced MCP Server Framework  
**Package**: fastmcp - Python package for MCP server implementation  
**Version**: Dynamic (from git tags via uv-dynamic-versioning)  
**Last Updated**: 2025-01-18  
**Repository**: https://github.com/dhafnck/dhafnck_mcp  

## Overview

This document provides a comprehensive guide to the organization and structure of the **dhafnck_mcp_main** project repository, which contains the **fastmcp** Python package (≥3.10). The project is designed as an advanced MCP (Model Context Protocol) server framework with integrated task management capabilities, implementing clean architecture with comprehensive task management system migrated and enhanced from the cursor_agent system.

**Key Distinction**: 
- **dhafnck_mcp_main**: Repository/project name
- **fastmcp**: Python package name (installed as `dhafnck_mcp` via PyPI)
- **dhafnck_mcp**: CLI command and PyPI package name

## 🏗️ Project Architecture

### Core Architecture Pattern
- **fastmcp Framework**: Advanced MCP server and client implementation (Python package)
- **Model Context Protocol (MCP)**: Standard protocol for AI model context management
- **Task Management Integration**: Domain-Driven Design (DDD) based task management system with MCP server capabilities
- **Plugin Architecture**: Modular tools, resources, prompts, and utilities
- **Type-Safe**: Fully typed codebase with Pyright validation
- **Test-Driven**: Comprehensive testing across all components
- **UV-Based Workflow**: Modern Python dependency management and tooling

## 📁 Directory Structure

```
dhafnck_mcp_main/
├── 📄 pyproject.toml              # Python project configuration (dhafnck_mcp package)
├── 📄 uv.lock                     # UV dependency lock file
├── 📄 justfile                    # Task automation (uv-based workflow)
├── 📄 LICENSE                     # Apache 2.0 License
├── 📄 AGENTS.md                   # Agent development guidelines
├── 📄 Windows_Notes.md            # Windows-specific development notes
├── 📁 src/                        # Source code (fastmcp library)
│   └── 📁 fastmcp/                # Main fastmcp package
│       ├── 📄 __init__.py         # Package exports (FastMCP, Context, Client)
│       ├── 📄 settings.py         # Configuration management
│       ├── 📄 exceptions.py       # fastmcp-specific exceptions
│       ├── 📄 py.typed            # Type annotations marker
│       ├── 📁 server/             # MCP Server implementation
│       ├── 📁 client/             # MCP Client SDK + helpers
│       ├── 📁 cli/                # Command-line interface
│       ├── 📁 tools/              # MCP Tool implementations
│       ├── 📁 resources/          # MCP Resources and templates
│       ├── 📁 prompts/            # MCP Prompt templates
│       ├── 📁 utilities/          # Shared utilities and types
│       ├── 📁 contrib/            # Community contributions
│       └── 📁 task_management/    # Integrated task management (DDD architecture)
│           ├── 📁 domain/         # Domain layer (business logic)
│           │   ├── 📁 entities/   # Core business entities (Task, Agent, Project, TaskTree)
│           │   ├── 📁 value_objects/ # Domain value objects (TaskId, Status, Priority)
│           │   ├── 📁 enums/      # Domain enumerations
│           │   ├── 📁 events/     # Domain events
│           │   ├── 📁 exceptions/ # Domain-specific exceptions
│           │   ├── 📁 repositories/ # Repository interfaces
│           │   └── 📁 services/   # Domain services
│           ├── 📁 application/    # Application layer (use cases)
│           │   ├── 📁 use_cases/  # Business use cases
│           │   ├── 📁 services/   # Application services
│           │   └── 📁 dtos/       # Data transfer objects
│           ├── 📁 infrastructure/ # Infrastructure layer
│           │   ├── 📁 repositories/ # Repository implementations
│           │   └── 📁 services/   # External service integrations
│           └── 📁 interface/      # Interface layer (MCP integration)
│               └── 📄 mcp_tools.py # MCP tool implementations
├── 📁 tests/                      # Comprehensive test suite
│   ├── 📄 conftest.py             # Pytest configuration and fixtures
│   ├── 📄 test_task_management_integration.py # Main integration tests
│   ├── 📄 test_task_management_integration_working.py # Working integration tests
│   ├── 📄 test_simple_integration.py # Simple integration tests
│   ├── 📄 test_examples.py        # Example tests
│   ├── 📁 auth/                   # Authentication system tests
│   ├── 📁 cli/                    # Command-line interface tests
│   ├── 📁 client/                 # Client SDK tests
│   ├── 📁 server/                 # Server implementation tests
│   ├── 📁 tools/                  # MCP tools tests
│   ├── 📁 resources/              # MCP resources tests
│   ├── 📁 prompts/                # MCP prompts tests
│   ├── 📁 utilities/              # Utilities tests
│   ├── 📁 contrib/                # Community contributions tests
│   ├── 📁 task_management/        # Task management integration tests
│   ├── 📁 test_servers/           # Test server implementations
│   ├── 📁 unit/                   # Isolated unit tests
│   └── 📁 deprecated/             # Legacy test preservation
├── 📁 docs/                       # Project documentation (Mintlify)
│   ├── 📄 docs.json               # Documentation configuration
│   ├── 📄 changelog.mdx           # Change log
│   ├── 📄 updates.mdx             # Updates and announcements
│   ├── 📄 style.css               # Documentation styling
│   ├── 📁 getting-started/        # Quick start guides
│   ├── 📁 python-sdk/             # Python SDK documentation (auto-generated)
│   ├── 📁 servers/                # Server implementation guides
│   ├── 📁 clients/                # Client usage documentation
│   ├── 📁 integrations/           # Integration examples
│   ├── 📁 patterns/               # Design patterns and best practices
│   ├── 📁 tutorials/              # Step-by-step tutorials
│   ├── 📁 deployment/             # Deployment guides
│   ├── 📁 community/              # Community resources
│   ├── 📁 snippets/               # Code snippets
│   └── 📁 assets/                 # Documentation assets
├── 📁 examples/                   # Minimal runnable demos
├── 📁 .cursor/                    # Cursor IDE configuration
│   └── 📁 rules/                  # Project rules and documentation
│       ├── 📄 project_organization.mdc # This file
│       ├── 📄 ddd-structure.mdc   # DDD architecture documentation
│       ├── 📄 project_prd.mdc     # Product requirements
│       ├── 📄 configuration.mdc   # Configuration guide
│       ├── 📄 core-mcp-objects.mdc # MCP objects documentation
│       └── 📁 tasks/              # Task management files
├── 📁 .venv/                      # Python virtual environment
├── 📁 .github/                    # GitHub workflows and templates
├── 📁 htmlcov/                    # Coverage reports (main)
├── 📁 htmlcov_task_management/    # Task management coverage reports
├── 📁 .pytest_cache/             # Pytest cache
└── 📁 __pycache__/               # Python bytecode cache
```

## 🧱 fastmcp Core Architecture

### 1. Server Layer (`src/fastmcp/server/`)
**Purpose**: MCP server implementation, networking, and authentication

The server layer provides the core MCP protocol implementation with support for various transport mechanisms and authentication methods.

### 2. Client Layer (`src/fastmcp/client/`)
**Purpose**: High-level client SDK and helper utilities

Provides a comprehensive client SDK for connecting to MCP servers with connection management and helper utilities.

### 3. CLI Layer (`src/fastmcp/cli/`)
**Purpose**: Command-line interface for dhafnck_mcp

Exposes the `dhafnck_mcp` command with various subcommands for server management and development.

### 4. MCP Object Implementations

#### Tools (`src/fastmcp/tools/`)
**Purpose**: MCP tool definitions and implementations
- Executable functions exposed to MCP clients
- Input validation and output formatting
- Error handling and logging
- Integration with task management system

#### Resources (`src/fastmcp/resources/`)  
**Purpose**: MCP resources and resource templates
- Static and dynamic resource management
- Template-based resource generation
- Resource discovery and caching

#### Prompts (`src/fastmcp/prompts/`)
**Purpose**: MCP prompt templates and management
- Reusable prompt templates
- Parameter substitution
- Prompt validation and formatting

### 5. Task Management Integration (`src/fastmcp/task_management/`)
**Purpose**: Complete task management system with Domain-Driven Design (DDD) architecture

This is a fully integrated task management system that follows DDD principles and exposes its functionality through MCP tools.

```
task_management/
├── 📁 domain/                     # Domain layer (business logic)
│   ├── 📁 entities/               # Core business entities
│   │   ├── 📄 task.py             # Task entity with business rules
│   │   ├── 📄 agent.py            # Agent entity  
│   │   ├── 📄 project.py          # Project entity
│   │   └── 📄 task_tree.py        # Task tree entity
│   ├── 📁 value_objects/          # Domain value objects
│   │   ├── 📄 task_id.py          # Task identifier
│   │   ├── 📄 task_status.py      # Status enumeration
│   │   └── 📄 priority.py         # Priority value object
│   ├── 📁 enums/                  # Domain enumerations
│   ├── 📁 events/                 # Domain events
│   ├── 📁 exceptions/             # Domain-specific exceptions
│   ├── 📁 repositories/           # Repository interfaces
│   └── 📁 services/               # Domain services
├── 📁 application/                # Application layer (use cases)
│   ├── 📁 use_cases/              # Business use cases
│   │   ├── 📄 create_task.py      # Create task use case
│   │   ├── 📄 get_task.py         # Get task use case
│   │   ├── 📄 update_task.py      # Update task use case
│   │   ├── 📄 delete_task.py      # Delete task use case
│   │   └── 📄 search_tasks.py     # Search tasks use case
│   ├── 📁 services/               # Application services
│   └── 📁 dtos/                   # Data transfer objects
├── 📁 infrastructure/             # Infrastructure layer
│   ├── 📁 repositories/           # Repository implementations
│   └── 📁 services/               # External service integrations
└── 📁 interface/                  # Interface layer (MCP integration)
    └── 📄 mcp_tools.py            # MCP tool implementations
```

### 6. Utilities and Shared Components (`src/fastmcp/utilities/`)
**Purpose**: Shared utilities, types, and helper functions

Common functionality used across the fastmcp package including type definitions, validation, logging, and serialization utilities.

### 7. Community Contributions (`src/fastmcp/contrib/`)
**Purpose**: Community-contributed extensions and plugins

Extensible architecture for community contributions and custom implementations.

## 🧪 Testing Architecture (`tests/`)

### Test Organization Strategy
- **Integration Tests**: Primary focus on end-to-end functionality
- **Unit Tests**: Individual component testing in `tests/unit/`
- **Component Tests**: Specific component testing (auth, cli, client, server, etc.)
- **Task Management Tests**: Dedicated testing for task management integration
- **Example Tests**: Validation of example code and demos

### Current Test Structure
```
tests/
├── 📄 conftest.py                 # Pytest configuration and fixtures
├── 📄 test_task_management_integration.py # Main integration tests
├── 📄 test_task_management_integration_working.py # Working integration tests
├── 📄 test_simple_integration.py  # Simple integration tests
├── 📄 test_examples.py            # Example validation tests
├── 📁 auth/                       # Authentication system tests
├── 📁 cli/                        # Command-line interface tests
├── 📁 client/                     # Client SDK tests
├── 📁 server/                     # Server implementation tests
├── 📁 tools/                      # MCP tools tests
├── 📁 resources/                  # MCP resources tests
├── 📁 prompts/                    # MCP prompts tests
├── 📁 utilities/                  # Utilities tests
├── 📁 contrib/                    # Community contributions tests
├── 📁 task_management/            # Task management specific tests
├── 📁 test_servers/               # Test server implementations
├── 📁 unit/                       # Isolated unit tests
└── 📁 deprecated/                 # Legacy test preservation
```

## 🚀 Development Workflow

### Environment Setup
```bash
# Clone repository
git clone https://github.com/dhafnck/dhafnck_mcp.git
cd dhafnck_mcp_main

# Install dependencies with UV
uv sync
```

### Development Commands (via justfile)
```bash
# Build/sync dependencies
just build
# or: uv sync

# Run full test suite
just test
# or: uv run --frozen pytest -xvs tests

# Type checking
just typecheck
# or: uv run --frozen pyright

# Documentation development
just docs
# or: cd docs && npx mint@latest dev

# API reference generation
just api-ref-all
# or: uvx --with-editable . --refresh-package mdxify mdxify@latest --all --root-module fastmcp --anchor-name "SDK Reference"

# Clean API reference
just api-ref-clean
# or: rm -rf docs/python-sdk
```

### Code Quality Standards
- **Language**: Python ≥ 3.10
- **Type Checking**: Full type annotations with Pyright (basic mode)
- **Code Style**: Enforced through Ruff with pre-commit hooks
- **Testing**: Pytest with asyncio support and coverage reporting
- **Documentation**: Mintlify-flavored Markdown with auto-generated API reference

### Configuration Details
- **Package Manager**: UV (modern Python dependency management)
- **Build System**: Hatchling with uv-dynamic-versioning
- **Version Strategy**: Git-based semantic versioning
- **Test Environment**: Pytest with asyncio, coverage, and timeout support
- **Development Dependencies**: Comprehensive dev toolchain including pre-commit, pyright, ruff

## 📚 Documentation Architecture (`docs/`)

### Documentation Platform
- **Framework**: Mintlify documentation platform
- **Auto-generation**: API reference via mdxify
- **Local Development**: `npx mint@latest dev`
- **Configuration**: `docs.json` for structure and settings

### Documentation Structure
```
docs/
├── 📄 docs.json               # Mintlify configuration
├── 📄 changelog.mdx           # Project changelog
├── 📄 updates.mdx             # Updates and announcements
├── 📄 style.css               # Custom styling
├── 📁 getting-started/        # Quick start guides
├── 📁 python-sdk/             # Auto-generated API reference
├── 📁 servers/                # Server implementation guides
├── 📁 clients/                # Client usage documentation  
├── 📁 integrations/           # Integration examples
├── 📁 patterns/               # Design patterns and best practices
├── 📁 tutorials/              # Step-by-step tutorials
├── 📁 deployment/             # Deployment guides
├── 📁 community/              # Community resources
├── 📁 snippets/               # Reusable code snippets
└── 📁 assets/                 # Documentation assets
```

## 🔧 Configuration Management

### Project Configuration (`pyproject.toml`)
- **Package Name**: `dhafnck_mcp` (PyPI)
- **Module Name**: `fastmcp` (import)
- **CLI Command**: `dhafnck_mcp` (entry point)
- **Build System**: Hatchling with UV dynamic versioning
- **Dependencies**: Core MCP + task management dependencies
- **Development Tools**: Comprehensive dev toolchain
- **Python Support**: ≥3.10 with full type annotations

### Key Dependencies
```toml
# Core MCP and framework dependencies
mcp = ">=1.9.4,<2.0.0"
httpx = ">=0.28.1"
rich = ">=13.9.4"
typer = ">=0.15.2"

# Task management dependencies (migrated from cursor_agent)
PyYAML = ">=6.0.1"
jsonschema = ">=4.17.0"
psutil = ">=5.9.0"

# Development dependencies
pytest = ">=8.3.3"
pyright = ">=1.1.389"
ruff = "*"
pre-commit = "*"
```

### Settings Management (`src/fastmcp/settings.py`)
- **Environment Variables**: Centralized configuration management
- **Runtime Settings**: Dynamic configuration with validation
- **Test Mode**: Special test environment configuration via `DHAFNCK_MCP_TEST_MODE`

## 🎯 Key Integration Points

### MCP Protocol Compliance
- **Standard Compliance**: Full MCP specification implementation
- **Transport Support**: WebSocket, HTTP, and custom transports
- **Tool Registration**: Automatic registration of task management tools
- **Resource Management**: Dynamic resource discovery and serving
- **Prompt Templates**: Reusable prompt management system

### Task Management Integration
- **MCP Tools**: Task management functionality exposed as MCP tools
- **Domain-Driven Design**: Clean separation of concerns with DDD architecture
- **Event-Driven**: Domain events for workflow automation and integration
- **Repository Pattern**: Pluggable persistence layer
- **Use Case Architecture**: Clear business logic separation

### Development Experience
- **Type Safety**: Full type checking with Pyright across the codebase
- **Hot Reloading**: Development server with automatic reload capabilities
- **Rich Error Reporting**: Enhanced error reporting with Rich library
- **CLI Integration**: Comprehensive command-line interface via Typer
- **Testing Framework**: Asyncio-compatible testing with comprehensive coverage

## 📈 Performance and Scalability

### Architecture Decisions
- **Async/Await**: Full asynchronous implementation throughout
- **Connection Management**: Efficient connection pooling and lifecycle management
- **Resource Optimization**: Multi-level caching and resource optimization
- **Modular Design**: Plugin architecture for horizontal scaling

### Monitoring and Observability
- **Structured Logging**: Rich-based logging with correlation support
- **Health Monitoring**: Built-in health check capabilities
- **Performance Metrics**: Integration points for performance monitoring
- **Debug Support**: Enhanced debugging with pdbpp integration

## 🔒 Security Architecture

### Authentication and Authorization
- **OAuth2 Support**: Standard OAuth2 implementation via Authlib
- **API Security**: Secure API key management and validation
- **Transport Security**: Secure transport layer implementation
- **Input Validation**: Comprehensive input sanitization and validation

### Data Protection
- **Type Safety**: Compile-time safety through comprehensive type annotations
- **Input Sanitization**: Multi-layer input validation and sanitization
- **Error Handling**: Secure error handling without information leakage
- **Audit Capabilities**: Integration points for audit logging

---

## 🎪 Usage Examples

### Basic MCP Server
```python
from fastmcp import FastMCP

app = FastMCP("my-server")

@app.tool()
def hello(name: str) -> str:
    """Say hello to someone."""
    return f"Hello, {name}!"

if __name__ == "__main__":
    app.run()
```

### Task Management Integration
```python
from fastmcp import FastMCP
from fastmcp.task_management import TaskManager

# Create MCP server with task management
app = FastMCP("task-server")

# Task management automatically exposes MCP tools
task_manager = TaskManager()
app.integrate(task_manager)

# Now task management tools are available via MCP
if __name__ == "__main__":
    app.run()
```

### CLI Usage
```bash
# Start a server
dhafnck_mcp serve --port 8000

# Run with task management
dhafnck_mcp serve --enable-tasks --port 8000

# Development mode
dhafnck_mcp dev --reload
```

This architecture ensures **dhafnck_mcp_main** (fastmcp package) provides a robust, scalable, and maintainable foundation for building MCP servers while integrating advanced task management capabilities through clean domain-driven design principles. The project leverages modern Python tooling (UV, Pyright, Ruff) and follows industry best practices for type safety, testing, and documentation.
