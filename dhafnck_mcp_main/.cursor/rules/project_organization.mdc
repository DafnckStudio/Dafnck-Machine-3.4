---
description: 
globs: 
alwaysApply: false
---
# Project Organization Guide

**Project**: dhafnck_mcp - Advanced MCP Server Framework
**Version**: Dynamic (from git tags)
**Last Updated**: 2025-01-18
**Repository**: https://github.com/phamhung075/dhafnck_mcp

## Overview

This document provides a comprehensive guide to the organization and structure of the **dhafnck_mcp** project, a Python library (≥3.10) designed as an advanced MCP (Model Context Protocol) server framework with integrated task management capabilities. The project implements a clean architecture with comprehensive task management system migrated and enhanced from the cursor_agent system.

## 🏗️ Project Architecture

### Core Architecture Pattern
- **dhafnck_mcp Framework**: Advanced MCP server and client implementation
- **Model Context Protocol (MCP)**: Standard protocol for AI model context management
- **Task Management Integration**: DDD-based task management system with MCP server capabilities
- **Plugin Architecture**: Modular tools, resources, prompts, and utilities
- **Type-Safe**: Fully typed codebase with Pyright validation
- **Test-Driven**: Comprehensive testing across all components

## 📁 Directory Structure

```
dhafnck_mcp_main/
├── 📄 pyproject.toml              # Python project configuration (dhafnck_mcp)
├── 📄 uv.lock                     # UV dependency lock file
├── 📄 justfile                    # Task automation (uv-based workflow)
├── 📄 LICENSE                     # Apache 2.0 License
├── 📄 AGENTS.md                   # Agent development guidelines
├── 📄 Windows_Notes.md            # Windows-specific development notes
├── 📁 src/                        # Source code (dhafnck_mcp library)
│   └── 📁 fastmcp/                # Main dhafnck_mcp package (internal structure)
│       ├── 📄 __init__.py         # Package exports (dhafnck_mcp, Context, Client)
│       ├── 📄 settings.py         # Configuration management
│       ├── 📄 exceptions.py       # dhafnck_mcp-specific exceptions
│       ├── 📄 py.typed            # Type annotations marker
│       ├── 📁 server/             # MCP Server implementation
│       ├── 📁 client/             # MCP Client SDK + helpers
│       ├── 📁 tools/              # MCP Tool implementations
│       ├── 📁 resources/          # MCP Resources and templates
│       ├── 📁 prompts/            # MCP Prompt templates
│       ├── 📁 utilities/          # Shared utilities and types
│       ├── 📁 contrib/            # Community contributions
│       └── 📁 task_management/    # Integrated task management (DDD architecture)
│           ├── 📁 domain/         # Domain layer (business logic)
│           ├── 📁 application/    # Application layer (use cases)
│           ├── 📁 infrastructure/ # Infrastructure layer (external concerns)
│           └── 📁 interface/      # Interface layer (MCP integration)
├── 📁 tests/                      # Comprehensive test suite
│   ├── 📄 conftest.py             # Pytest configuration
│   ├── 📁 auth/                   # Authentication tests
│   ├── 📁 cli/                    # CLI tests
│   ├── 📁 client/                 # Client SDK tests
│   ├── 📁 server/                 # Server implementation tests
│   ├── 📁 tools/                  # Tool implementation tests
│   ├── 📁 resources/              # Resource tests
│   ├── 📁 prompts/                # Prompt tests
│   ├── 📁 utilities/              # Utility tests
│   ├── 📁 contrib/                # Contribution tests
│   ├── 📁 task_management/        # Task management integration tests
│   └── 📁 deprecated/             # Legacy test preservation
├── 📁 docs/                       # Project documentation
├── 📁 examples/                   # Minimal runnable demos
├── 📁 .venv/                      # Python virtual environment
├── 📁 .github/                    # GitHub workflows and templates
└── 📁 htmlcov/                    # Coverage reports
```

## 🧱 dhafnck_mcp Core Architecture

### 1. Server Layer (`src/fastmcp/server/`)
**Purpose**: MCP server implementation, networking, and authentication

```
server/
├── 📄 server.py                   # dhafnck_mcp main server class
├── 📄 context.py                  # Request context management
├── 📄 auth.py                     # Authentication and authorization
├── 📄 networking.py               # Network protocol handling
├── 📄 middleware.py               # Request/response middleware
└── 📄 exceptions.py               # Server-specific exceptions
```

### 2. Client Layer (`src/fastmcp/client/`)
**Purpose**: High-level client SDK and helper utilities

```
client/
├── 📄 __init__.py                 # Client exports
├── 📄 client.py                   # Main MCP client implementation
├── 📄 connection.py               # Connection management
├── 📄 transport.py                # Transport layer abstractions
└── 📄 helpers.py                  # Client utility functions
```

### 3. MCP Object Implementations

#### Tools (`src/fastmcp/tools/`)
**Purpose**: MCP tool definitions and implementations
- Executable functions exposed to MCP clients
- Input validation and output formatting
- Error handling and logging

#### Resources (`src/fastmcp/resources/`)  
**Purpose**: MCP resources and resource templates
- Static and dynamic resource management
- Template-based resource generation
- Resource discovery and caching

#### Prompts (`src/fastmcp/prompts/`)
**Purpose**: MCP prompt templates and management
- Reusable prompt templates
- Parameter substitution
- Prompt validation and formatting

### 4. Task Management Integration (`src/fastmcp/task_management/`)
**Purpose**: Complete task management system with DDD architecture

```
task_management/
├── 📁 domain/                     # Domain layer (business logic)
│   ├── 📁 entities/               # Core business entities
│   │   ├── 📄 task.py             # Task entity with business rules
│   │   ├── 📄 agent.py            # Agent entity  
│   │   ├── 📄 project.py          # Project entity
│   │   └── 📄 task_tree.py        # Task tree entity
│   ├── 📁 value_objects/          # Domain value objects
│   │   ├── 📄 task_id.py          # Task identifier
│   │   ├── 📄 task_status.py      # Status enumeration
│   │   └── 📄 priority.py         # Priority value object
│   ├── 📁 events/                 # Domain events
│   ├── 📁 exceptions/             # Domain-specific exceptions
│   ├── 📁 repositories/           # Repository interfaces
│   └── 📁 services/               # Domain services
├── 📁 application/                # Application layer (use cases)
│   ├── 📁 use_cases/              # Business use cases
│   │   ├── 📄 create_task.py      # Create task use case
│   │   ├── 📄 get_task.py         # Get task use case
│   │   ├── 📄 update_task.py      # Update task use case
│   │   ├── 📄 delete_task.py      # Delete task use case
│   │   └── 📄 search_tasks.py     # Search tasks use case
│   ├── 📁 services/               # Application services
│   └── 📁 dtos/                   # Data transfer objects
├── 📁 infrastructure/             # Infrastructure layer
│   ├── 📁 repositories/           # Repository implementations
│   └── 📁 services/               # External service integrations
└── 📁 interface/                  # Interface layer (MCP integration)
    └── 📄 mcp_tools.py            # MCP tool implementations
```

### 5. Utilities and Shared Components (`src/fastmcp/utilities/`)
**Purpose**: Shared utilities, types, and helper functions

```
utilities/
├── 📄 types.py                    # Common type definitions
├── 📄 validation.py               # Input validation utilities
├── 📄 logging.py                  # Logging configuration
├── 📄 serialization.py            # JSON/YAML serialization
└── 📄 decorators.py               # Common decorators
```

### 6. Community Contributions (`src/fastmcp/contrib/`)
**Purpose**: Community-contributed extensions and plugins

## 🧪 Testing Architecture (`tests/`)

### Test Organization Strategy
- **Unit Tests**: Individual component testing
- **Integration Tests**: Cross-component interaction testing  
- **End-to-End Tests**: Full workflow testing
- **Performance Tests**: Load and stress testing
- **Compatibility Tests**: Cross-platform validation

### Test Structure
```
tests/
├── 📄 conftest.py                 # Pytest configuration and fixtures
├── 📁 auth/                       # Authentication system tests
├── 📁 cli/                        # Command-line interface tests
├── 📁 client/                     # Client SDK tests
├── 📁 server/                     # Server implementation tests
├── 📁 tools/                      # MCP tools tests
├── 📁 resources/                  # MCP resources tests
├── 📁 prompts/                    # MCP prompts tests
├── 📁 utilities/                  # Utilities tests
├── 📁 contrib/                    # Community contributions tests
├── 📁 task_management/            # Task management integration tests
│   ├── 📄 test_domain_entities.py
│   ├── 📄 test_use_cases.py
│   └── 📄 test_mcp_integration.py
├── 📁 deprecated/                 # Legacy test preservation
└── 📁 unit/                       # Isolated unit tests
```

## 🚀 Development Workflow

### Mandatory Development Process
```bash
# Environment setup
uv sync                              # Install dependencies

# Code quality checks
uv run pre-commit run --all-files    # Ruff + Prettier + Pyright

# Testing
uv run pytest                        # Run full test suite
uv run pytest tests/quick/           # Quick smoke tests
uv run pytest --cov                  # Coverage analysis
```

### Code Quality Standards
- **Language**: Python ≥ 3.10
- **Type Checking**: Full type annotations with Pyright
- **Code Style**: Enforced through Ruff and pre-commit hooks
- **Testing**: Comprehensive test coverage requirement
- **Documentation**: Mintlify-flavored Markdown

## 📚 Documentation Architecture (`docs/`)

### Documentation Structure
```
docs/
├── 📁 getting-started/            # Quick start guides
├── 📁 python-sdk/                 # Python SDK documentation
├── 📁 servers/                    # Server implementation guides
├── 📁 clients/                    # Client usage documentation
├── 📁 integrations/               # Integration examples
├── 📁 patterns/                   # Design patterns and best practices
├── 📁 tutorials/                  # Step-by-step tutorials
├── 📁 deployment/                 # Deployment guides
├── 📁 community/                  # Community resources
└── 📁 assets/                     # Documentation assets
```

### Documentation Publishing
- **Platform**: GitHub Pages / Documentation site
- **Source**: Markdown files in `docs/`
- **Automation**: Automated publishing pipeline

## 🔧 Configuration Management

### Project Configuration (`pyproject.toml`)
- **Build System**: Hatchling with UV dynamic versioning
- **Dependencies**: Core MCP dependencies + task management additions
- **Scripts**: CLI entry points via `dhafnck_mcp` command
- **Development Dependencies**: Comprehensive dev toolchain

### Settings Management (`src/fastmcp/settings.py`)
- **Environment Variables**: Centralized configuration
- **Runtime Settings**: Dynamic configuration management
- **Validation**: Configuration validation and defaults

## 🎯 Key Integration Points

### MCP Protocol Compliance
- **Standard Compliance**: Full MCP specification implementation
- **Extension Points**: Custom tool/resource/prompt registration
- **Transport Layers**: WebSocket, HTTP, and custom transports

### Task Management Integration
- **MCP Tools**: Task management exposed as MCP tools
- **Domain-Driven Design**: Clean architecture separation
- **Event-Driven**: Domain events for workflow automation

### Development Experience
- **Type Safety**: Full type checking with Pyright
- **Hot Reloading**: Development server with auto-reload
- **Rich Debugging**: Enhanced error reporting and tracing

## 📈 Performance and Scalability

### Architecture Decisions
- **Async/Await**: Full asynchronous implementation
- **Connection Pooling**: Efficient resource management  
- **Caching**: Multi-level caching strategies
- **Load Balancing**: Horizontal scaling support

### Monitoring and Observability
- **Metrics**: Performance metrics collection
- **Logging**: Structured logging with correlation IDs
- **Health Checks**: Comprehensive health monitoring
- **Tracing**: Distributed tracing support

## 🔒 Security Architecture

### Authentication and Authorization
- **OAuth2**: Standard OAuth2 implementation
- **API Keys**: API key-based authentication
- **Role-Based Access**: Granular permission system
- **Rate Limiting**: Request rate limiting and throttling

### Data Protection
- **Input Validation**: Comprehensive input sanitization
- **Output Encoding**: Safe output encoding
- **Audit Logging**: Security event logging
- **Encryption**: Data encryption at rest and in transit

---

## 🎪 Usage Examples

### Basic MCP Server
```python
from fastmcp import FastMCP

app = FastMCP("my-server")

@app.tool()
def hello(name: str) -> str:
    return f"Hello, {name}!"

if __name__ == "__main__":
    app.run()
```

### Task Management Integration
```python
from fastmcp.task_management import TaskManager

# Task management automatically exposed as MCP tools
task_manager = TaskManager()
app.integrate(task_manager)
```

This architecture ensures **dhafnck_mcp** provides a robust, scalable, and maintainable foundation for building MCP servers while integrating advanced task management capabilities through clean domain-driven design principles.
