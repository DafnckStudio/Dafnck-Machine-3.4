---
description: 
globs: 
alwaysApply: false
---
# Domain-Driven Design Architecture

**Project**: dhafnck_mcp_main - fastmcp Task Management Integration  
**Package**: fastmcp.dhafnck_mcp - DDD-based task management system  
**Last Updated**: 2025-01-18  

## 🏗️ DDD Architecture Overview

The **fastmcp** task management system follows Domain-Driven Design principles with clean layer separation for maintainability, testability, and extensibility. The implementation is fully integrated into the fastmcp framework as `fastmcp.dhafnck_mcp` with comprehensive MCP tool exposure through a consolidated architecture.

**Key Architecture Principles:**
- **Clean Layer Separation**: Domain → Application → Infrastructure → Interface
- **Dependency Inversion**: All dependencies point inward toward the domain
- **MCP Integration**: Task management exposed as MCP tools for AI assistant integration
- **Type Safety**: Full type annotations throughout the codebase
- **Async/Await**: Asynchronous implementation for performance

## 📁 Layer Structure

### Domain Layer (`src/fastmcp/dhafnck_mcp/domain/`)
**Core business logic and rules - No external dependencies**

```
domain/
├── 📁 entities/                   # Core business entities
│   ├── 📄 task.py                 # Task entity with business rules (933 lines)
│   ├── 📄 agent.py                # Agent entity for multi-agent coordination (277 lines)
│   ├── 📄 project.py              # Project entity for project management (254 lines)
│   ├── 📄 task_tree.py            # Task tree entity for workstream organization (212 lines)
│   └── 📄 work_session.py         # Work session entity for tracking (242 lines)
├── 📁 value_objects/              # Immutable domain value objects
│   ├── 📄 task_id.py              # Task identifier value object
│   ├── 📄 task_status.py          # Status enumeration and logic
│   └── 📄 priority.py             # Priority value object with business rules
├── 📁 enums/                      # Domain enumerations
│   ├── 📄 task_status.py          # Task status enumeration
│   ├── 📄 priority.py             # Priority levels
│   └── 📄 agent_role.py           # Agent role definitions
├── 📁 events/                     # Domain events for event-driven architecture
│   ├── 📄 task_events.py          # Task lifecycle events
│   └── 📄 project_events.py       # Project-related events
├── 📁 exceptions/                 # Domain-specific exceptions
│   ├── 📄 task_exceptions.py      # Task-related business rule violations
│   └── 📄 validation_exceptions.py # Domain validation errors
├── 📁 repositories/               # Repository interfaces (abstractions)
│   ├── 📄 task_repository.py      # Task persistence interface
│   ├── 📄 project_repository.py   # Project persistence interface
│   └── 📄 agent_repository.py     # Agent persistence interface
└── 📁 services/                   # Domain services for complex business logic
    ├── 📄 task_orchestration.py   # Task orchestration business rules
    └── 📄 dependency_resolver.py  # Dependency resolution logic
```

**Key Domain Entities:**
- **Task**: Central business entity with comprehensive business rules and validation
- **Agent**: Multi-agent coordination entity with role-based capabilities
- **Project**: Project management entity with task tree organization
- **TaskTree**: Workstream organization for parallel development
- **WorkSession**: Session tracking for productivity and analytics

### Application Layer (`src/fastmcp/dhafnck_mcp/application/`)
**Use cases and application services - Orchestrates domain logic**

```
application/
├── 📁 use_cases/                  # Business use cases (application operations)
│   ├── 📄 create_task.py          # Create task use case (110 lines)
│   ├── 📄 get_task.py             # Retrieve task use case (49 lines)
│   ├── 📄 update_task.py          # Update task use case (91 lines)
│   ├── 📄 delete_task.py          # Delete task use case (41 lines)
│   ├── 📄 complete_task.py        # Complete task use case (59 lines)
│   ├── 📄 list_tasks.py           # List/filter tasks use case (39 lines)
│   ├── 📄 search_tasks.py         # Search tasks use case (19 lines)
│   ├── 📄 manage_subtasks.py      # Subtask management use case (157 lines)
│   ├── 📄 manage_dependencies.py  # Dependency management use case (178 lines)
│   ├── 📄 do_next.py              # Intelligent next task recommendation (309 lines)
│   └── 📄 call_agent.py           # Agent integration use case (99 lines)
├── 📁 services/                   # Application services
│   ├── 📄 task_application_service.py # Main application service coordinator
│   ├── 📄 project_service.py      # Project management service
│   └── 📄 agent_coordination_service.py # Agent coordination service
└── 📁 dtos/                       # Data Transfer Objects
    ├── 📄 task_dto.py              # Task data transfer objects
    ├── 📄 create_task_request.py   # Task creation request DTO
    └── 📄 update_task_request.py   # Task update request DTO
```

**Key Use Cases:**
- **create_task**: Comprehensive task creation with validation and business rules
- **do_next**: Intelligent task recommendation based on priorities and dependencies
- **manage_subtasks**: Hierarchical task breakdown and management
- **manage_dependencies**: Task relationship and dependency management
- **call_agent**: Agent integration and role-based task assignment

### Infrastructure Layer (`src/fastmcp/dhafnck_mcp/infrastructure/`)
**External concerns and persistence - Implements domain interfaces**

```
infrastructure/
├── 📁 repositories/               # Repository implementations
│   ├── 📄 json_task_repository.py # JSON-based task persistence with atomic operations
│   ├── 📄 json_project_repository.py # JSON-based project persistence
│   └── 📄 json_agent_repository.py # JSON-based agent persistence
└── 📁 services/                   # External service integrations
    ├── 📄 file_auto_rule_generator.py # File-based auto rule generation
    ├── 📄 yaml_agent_loader.py    # YAML-based agent configuration loading
    └── 📄 cursor_integration_service.py # Cursor IDE integration service
```

**Key Infrastructure Components:**
- **JSON Repositories**: Atomic file-based persistence with transaction safety
- **Auto Rule Generator**: Dynamic AI context rule generation for Cursor integration
- **Agent Loader**: YAML-based agent configuration and capability loading
- **Cursor Integration**: Deep integration with Cursor IDE and rules system

### Interface Layer (`src/fastmcp/dhafnck_mcp/interface/`)
**MCP integration and external interfaces - Exposes functionality via MCP protocol**

```
interface/
├── 📄 consolidated_mcp_tools_v2.py    # Main MCP tools implementation (1188 lines)
├── 📄 cursor_rules_tools.py           # Cursor-specific MCP tools (617 lines)
├── 📄 consolidated_mcp_server.py      # MCP server configuration (51 lines)
├── 📄 ddd_mcp_server.py               # DDD-specific server setup (45 lines)
└── 📄 mcp_tools.py                    # Base MCP tool definitions (12 lines)
```

**MCP Tool Architecture:**
- **consolidated_mcp_tools_v2.py**: Core task management tools with comprehensive functionality
- **cursor_rules_tools.py**: Specialized tools for Cursor IDE integration and rule management
- **Server Configuration**: Proper MCP server setup with DDD integration

## 🛠️ Current MCP Tool Architecture

### Core Task Management Tools (consolidated_mcp_tools_v2.py)
- **`manage_project`**: Multi-agent project lifecycle management with orchestration
- **`manage_task`**: Comprehensive task management with 15+ actions (create, get, update, delete, complete, list, search, next)
- **`manage_subtask`**: Hierarchical subtask management with progress tracking
- **`manage_agent`**: Agent coordination, assignment, and workload balancing
- **`call_agent`**: Agent capability loading and role-based integration

### Cursor Integration Tools (cursor_rules_tools.py)
- **`update_auto_rule`**: Direct AI context rule updates for dynamic behavior
- **`validate_rules`**: Rule file quality analysis and validation
- **`manage_cursor_rules`**: Complete rule file system management
- **`regenerate_auto_rule`**: Smart context generation based on tasks and roles
- **`validate_tasks_json`**: Task database integrity validation and health checks

## 🎯 DDD Benefits in fastmcp Integration

### Clean Separation of Concerns
- **Domain Logic**: Pure business logic isolated from MCP protocol details
- **Business Rules**: Centralized in domain entities with comprehensive validation
- **Infrastructure**: JSON-based persistence easily replaceable with databases
- **MCP Integration**: Clean interface layer that doesn't pollute business logic

### Type Safety and Modern Python
- **Full Type Annotations**: Complete type safety throughout all layers
- **Async/Await**: Asynchronous implementation for high-performance MCP operations
- **Pydantic Integration**: Type-safe data validation and serialization
- **Modern Python**: Python 3.10+ features with comprehensive error handling

### Testability and Quality
- **Unit Tests**: Domain logic tested in complete isolation
- **Integration Tests**: Application layer coordination with comprehensive coverage
- **MCP Integration Tests**: End-to-end testing of MCP tool functionality
- **Type Checking**: Pyright validation ensures compile-time safety

### Extensibility and Maintainability
- **New Use Cases**: Easy addition without modifying existing code
- **Multiple Protocols**: MCP integration doesn't prevent other protocol support
- **Storage Flexibility**: Repository pattern allows multiple persistence backends
- **Agent Integration**: Pluggable agent system with YAML-based configuration

## 🧪 Testing Architecture

### Test Coverage Strategy
```
tests/
├── 📄 test_task_management_integration.py      # Main integration tests (527 lines)
├── 📄 test_task_management_integration_working.py # Working integration tests (592 lines)
├── 📄 test_simple_integration.py               # Simple integration tests (143 lines)
├── 📁 dhafnck_mcp/                         # Task management specific tests
│   ├── 📄 test_domain_entities.py              # Domain entity unit tests
│   ├── 📄 test_use_cases.py                    # Use case integration tests
│   ├── 📄 test_mcp_integration.py              # MCP tool functionality tests
│   └── 📄 test_repository_implementations.py   # Infrastructure layer tests
├── 📁 unit/                                    # Isolated unit tests
└── 📁 integration/                             # Cross-layer integration tests
```

### Test Organization Principles
- **Domain Tests**: Pure unit tests with no external dependencies
- **Application Tests**: Use case testing with mocked infrastructure
- **Infrastructure Tests**: Repository and external service integration testing
- **MCP Integration Tests**: End-to-end workflow validation through MCP protocol

## 🔧 Technology Stack

### Core Framework Integration
- **fastmcp**: Modern MCP server framework with full integration
- **Python 3.10+**: Modern Python with type annotations and async/await
- **JSON Storage**: Atomic file operations with transaction safety
- **Pydantic**: Type-safe data validation and serialization
- **Rich Logging**: Comprehensive logging with structured output

### Development and Quality Tools
- **pytest**: Comprehensive testing framework with asyncio support
- **pyright**: Static type checking with strict mode
- **ruff**: Modern Python linting and formatting
- **uv**: Modern Python package management and dependency resolution
- **pre-commit**: Automated code quality checks

### Dependencies and Integration
- **MCP Protocol**: Full Model Context Protocol compliance
- **YAML Processing**: Agent configuration and rule management
- **JSON Processing**: Task persistence and data interchange
- **File System**: Atomic operations and safe concurrent access
- **Async/Await**: High-performance asynchronous operations

## 🔄 Architecture Evolution

### Current State (2025-01-18)
- **✅ Full DDD Implementation**: Complete domain-driven design with all layers
- **✅ fastmcp Integration**: Native integration with fastmcp framework
- **✅ MCP Tool Suite**: Comprehensive MCP tools for all task management operations
- **✅ Multi-Agent Support**: Full project, agent, and task tree coordination
- **✅ Cursor Integration**: Deep integration with Cursor IDE and rules system
- **✅ Type Safety**: Complete type annotations with Pyright validation
- **✅ Async Implementation**: High-performance asynchronous operations
- **✅ Comprehensive Testing**: Full test coverage across all layers

### Key Architectural Decisions
- **JSON-Based Persistence**: Simple, reliable, and easily debuggable storage
- **Atomic Operations**: Transaction safety for concurrent access
- **Event-Driven Architecture**: Domain events for loose coupling and extensibility
- **Repository Pattern**: Clean abstraction for data persistence
- **Use Case Architecture**: Clear business operation boundaries
- **MCP-First Design**: Optimized for AI assistant integration

### Future Enhancement Opportunities
- **Database Integration**: Optional database backends for large-scale deployments
- **Event Streaming**: External event bus integration for distributed systems
- **Advanced Analytics**: Task performance and productivity analytics
- **Workflow Automation**: Advanced orchestration and automation capabilities
- **Multi-Tenant Support**: Project isolation and access control

## 📋 Development Guidelines

### Layer Communication Rules
```
┌─────────────────┐
│   Interface     │ ← MCP Tools, Server Configuration
│   (MCP Layer)   │
└─────────────────┘
         ↓
┌─────────────────┐
│ Infrastructure  │ ← Repositories, External Services
│    Layer        │
└─────────────────┘
         ↓
┌─────────────────┐
│  Application    │ ← Use Cases, Application Services
│     Layer       │
└─────────────────┘
         ↓
┌─────────────────┐
│    Domain       │ ← Entities, Value Objects, Business Rules
│     Layer       │
└─────────────────┘
```

**Dependency Rules:**
- **Domain Layer**: No dependencies on other layers (pure business logic)
- **Application Layer**: Can depend only on Domain layer
- **Infrastructure Layer**: Can depend on Domain and Application layers
- **Interface Layer**: Can access all layers but should minimize direct domain access

### Code Organization Principles
- **Single Responsibility**: Each class and module has one clear purpose
- **Dependency Inversion**: Depend on abstractions, not concrete implementations
- **Open/Closed Principle**: Open for extension, closed for modification
- **Interface Segregation**: Small, focused interfaces and contracts
- **Don't Repeat Yourself**: Shared functionality properly abstracted

### Adding New Features (Step-by-Step)
1. **Domain First**: Define new entities, value objects, or business rules in domain layer
2. **Use Cases**: Create application layer use cases for new operations
3. **Infrastructure**: Implement necessary persistence or external service integrations
4. **MCP Tools**: Add MCP tool interfaces for AI assistant integration
5. **Testing**: Write comprehensive tests at all layers
6. **Documentation**: Update architectural documentation and usage examples

## 🎪 Usage Examples

### Basic Task Management via MCP
```python
# MCP tool call for task creation
{
    "action": "create",
    "title": "Implement user authentication",
    "description": "Add OAuth2 authentication to the API",
    "priority": "high",
    "assignee": "@coding_agent",
    "estimated_effort": "medium"
}
```

### Multi-Agent Project Coordination
```python
# Project setup with agent coordination
{
    "action": "create",
    "project_id": "auth_system",
    "name": "Authentication System",
    "description": "Complete OAuth2 implementation"
}

# Agent assignment to task trees
{
    "action": "assign",
    "project_id": "auth_system",
    "agent_id": "security_expert",
    "tree_id": "security_review"
}
```

### Intelligent Task Orchestration
```python
# Get next recommended task
{
    "action": "next"
}
# Returns optimized task recommendation based on:
# - Priority levels and urgency
# - Dependency resolution
# - Agent availability and capabilities
# - Workload balancing
```

## 🔒 Security and Data Integrity

### Data Protection
- **Atomic Operations**: All file operations are atomic to prevent corruption
- **Input Validation**: Comprehensive validation at domain and application layers
- **Type Safety**: Compile-time safety through complete type annotations
- **Error Handling**: Graceful error handling with detailed logging

### Access Control
- **Agent-Based Access**: Role-based access through agent assignments
- **Project Isolation**: Tasks organized by projects with clear boundaries
- **Audit Trail**: Comprehensive logging of all operations and changes

---

## 🏛️ Architecture Summary

The **fastmcp.dhafnck_mcp** system demonstrates a mature Domain-Driven Design implementation fully integrated with the fastmcp framework. It provides:

- **Clean Architecture**: Proper layer separation with inward-only dependencies
- **MCP Integration**: Native AI assistant integration through comprehensive MCP tools
- **Type Safety**: Complete type annotations with Pyright validation
- **High Performance**: Async/await implementation for optimal performance
- **Extensibility**: Plugin architecture for agents, storage backends, and protocols
- **Reliability**: Atomic operations and comprehensive error handling
- **Developer Experience**: Rich tooling, comprehensive testing, and clear documentation

This architecture ensures long-term maintainability while providing powerful task management capabilities optimized for AI assistant integration through the Model Context Protocol.

---
> **Architecture Principle**: Maintain clean layer separation with inward-only dependencies while providing comprehensive MCP integration for optimal AI assistant collaboration and task management automation.