---
description: 
globs: 
alwaysApply: false
---
# MCP Server Configuration

## üîß Server Details
- **Server Name**: `task_management`
- **Framework**: dhafnck_mcp with Domain-Driven Design
- **Location**: `dhafnck_mcp_main/src/mcp_server.py`
- **Working Directory**: `/home/<username>/agentic-project`
- **Environment**: `PYTHONPATH` set to `dhafnck_mcp_main/src`
MCP Server run on Window Cursor 
test on WSL:Ubuntu 
MCP config
"task_management": {
      "command": "/home/<username>/agentic-project/dhafnck_mcp_main/.venv/bin/python",
      "args": [
        "/home/<username>/agentic-project/dhafnck_mcp_main/src/task_mcp/interface/consolidated_mcp_server.py"
      ],
      "cwd": "/home/<username>/agentic-project",
      "env": {
        "PYTHONPATH": "/home/<username>/agentic-project/dhafnck_mcp_main/src"
        
      }
    },

## üìÅ File Locations
- **MCP Config**: `~/.cursor/mcp.json`
- **Cursor Settings**: `.cursor/settings.json`
- **Tasks Storage**: `.cursor/rules/tasks/tasks.json`
- **Auto-generated Rules**: `.cursor/rules/auto_rule.mdc`

## ‚öôÔ∏è Configuration Files

### ~/.cursor/mcp.json
[mcp_config_example.json](mdc:cursor_agent/mcp_config_example.json)

### Startup Script (dhafnck_mcp_main/start_mcp_server.sh)
```bash
#!/bin/bash
cd /home/<username>/agentic-project
export PYTHONPATH=dhafnck_mcp_main/src
dhafnck_mcp_main/.venv/bin/python dhafnck_mcp_main/src/mcp_server.py
```

## üöÄ Server Management

### Start Server
```bash
# Using startup script
dhafnck_mcp_main/start_mcp_server.sh

# Direct execution
cd /path/to/project
export PYTHONPATH=dhafnck_mcp_main/src
dhafnck_mcp_main/.venv/bin/python dhafnck_mcp_main/src/mcp_server.py
```

### Test Server Connection
```bash
# MCP Inspector
DANGEROUSLY_OMIT_AUTH=true npx @modelcontextprotocol/inspector dhafnck_mcp_main/.venv/bin/python dhafnck_mcp_main/src/mcp_server.py

# Inspector URL: http://127.0.0.1:6274/#tools
```

### Verify Server Status
```bash
# Check if running
ps aux | grep mcp_server

# Test diagnostic
# Use MCP tool: manage_project with action="diagnostic"
```

## üõ†Ô∏è MCP Tools Overview (8 Total)

### Project Management Tools (3 tools)
1. **`manage_project`** - Complete multi-agent project lifecycle management
2. **`manage_task`** - Comprehensive task lifecycle management with 15+ actions
3. **`manage_agent`** - Multi-agent team management and intelligent assignment

### Cursor Rules Management Tools (5 tools)
4. **`update_auto_rule`** - Direct update of AI assistant context rules
5. **`validate_rules`** - Comprehensive rule file quality analysis
6. **`manage_cursor_rules`** - Complete rule file system management
7. **`regenerate_auto_rule`** - Smart context generation for AI assistant
8. **`validate_tasks_json`** - Tasks.json integrity validation

## üìã Tool Access Requirements
- **Primary**: MCP server must be running
- **Session**: Tools available in Agent mode and specific session types
- **Fallback**: Direct file access when MCP unavailable
- **Preference**: Always use MCP tools over direct file access

## üîÑ Session Compatibility
- **Agent Mode**: Full MCP tool access
- **Chat Mode**: Limited availability (session-dependent)
- **Fallback Mode**: Direct JSON file access via `.cursor/rules/tasks/tasks.json`

## üêõ Common Configuration Issues

### Tools Not Available
1. **Check Server Status**: `ps aux | grep mcp_server`
2. **Verify Config**: Ensure `~/.cursor/mcp.json` has task_management entry
3. **Restart Server**: Run startup script manually
4. **Switch Mode**: Try Agent mode in Cursor
5. **Restart Cursor**: Close and reopen Cursor IDE

### Permission Issues
- Ensure startup script is executable: `chmod +x dhafnck_mcp_main/start_mcp_server.sh`
- Check Python virtual environment path
- Verify working directory permissions

### Path Issues
- Confirm PYTHONPATH is set correctly
- Validate all file paths in configuration
- Check that dhafnck_mcp_main/src directory exists

## üìä Configuration Validation
Use the MCP tool `manage_project` with action="diagnostic" to verify:
- All 8 tools are registered
- Server configuration is correct
- Storage system is operational
- Task loading is functional

## üîß Current Architecture
- **DDD Implementation**: Domain-Driven Design with clean layer separation
- **Consolidated Tools**: Simplified tool interface with enhanced descriptions
- **Multi-Agent Support**: Basic multi-agent coordination capabilities
- **YAML Configuration**: Role-based configuration system
- **JSON Storage**: Simple, reliable task persistence

---
> **Note**: After configuration changes, restart the MCP server to see updates reflected in diagnostic tools.