#!/bin/bash

# Project Setup Script for AI Environment with MCP Server
# Usage: ./setup.sh <project_name> <project_path>
# Example: ./setup.sh chaxiaiv2 /home/daihungpham/__projects__/chaxiai

set -e

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SOURCE_PROJECT="/home/daihungpham/agentic-project"
USERNAME="daihungpham"

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}========================================${NC}"
    echo -e "${BLUE} AI Environment Setup Script${NC}"
    echo -e "${BLUE}========================================${NC}"
}

# Function to validate inputs
validate_inputs() {
    if [ $# -ne 2 ]; then
        print_error "Usage: $0 <project_name> <project_path>"
        print_error "Example: $0 chaxiaiv2 /home/daihungpham/__projects__/chaxiai"
        exit 1
    fi

    PROJECT_NAME="$1"
    PROJECT_PATH="$2"
    
    # Validate project name (alphanumeric and underscore only)
    if [[ ! "$PROJECT_NAME" =~ ^[a-zA-Z0-9_]+$ ]]; then
        print_error "Project name must contain only alphanumeric characters and underscores"
        exit 1
    fi
    
    # Check if source project exists
    if [ ! -d "$SOURCE_PROJECT" ]; then
        print_error "Source project directory not found: $SOURCE_PROJECT"
        exit 1
    fi
    
    print_status "Project Name: $PROJECT_NAME"
    print_status "Project Path: $PROJECT_PATH"
}

# Function to create project directory structure
create_project_structure() {
    print_status "Creating project directory structure..."
    
    # Create main project directory
    mkdir -p "$PROJECT_PATH"
    
    # Create .cursor directory structure
    mkdir -p "$PROJECT_PATH/.cursor/rules"
    mkdir -p "$PROJECT_PATH/.cursor/rules/brain"
    mkdir -p "$PROJECT_PATH/.cursor/rules/contexts/default_id/$PROJECT_NAME"
    mkdir -p "$PROJECT_PATH/.cursor/rules/tasks/default_id/$PROJECT_NAME/main"
    mkdir -p "$PROJECT_PATH/.cursor/rules/agents"
    mkdir -p "$PROJECT_PATH/.cursor/rules/02_AI-DOCS"
    
    print_status "Directory structure created successfully"
}

# Function to copy essential rule files
copy_rule_files() {
    print_status "Copying essential rule files..."
    
    # Copy core rule files
    cp "$SOURCE_PROJECT/.cursor/rules/dhafnck_mcp.mdc" "$PROJECT_PATH/.cursor/rules/"
    cp "$SOURCE_PROJECT/.cursor/rules/agents.mdc" "$PROJECT_PATH/.cursor/rules/"
    cp "$SOURCE_PROJECT/.cursor/rules/memory.mdc" "$PROJECT_PATH/.cursor/rules/"
    cp "$SOURCE_PROJECT/.cursor/rules/global_rule.txt" "$PROJECT_PATH/.cursor/rules/"
    
    # Copy AI documentation
    cp -r "$SOURCE_PROJECT/.cursor/rules/02_AI-DOCS" "$PROJECT_PATH/.cursor/rules/"
    
    # Copy agent configurations
    cp -r "$SOURCE_PROJECT/.cursor/rules/agents" "$PROJECT_PATH/.cursor/rules/"
    
    # Copy tools
    if [ -d "$SOURCE_PROJECT/.cursor/rules/tools" ]; then
        cp -r "$SOURCE_PROJECT/.cursor/rules/tools" "$PROJECT_PATH/.cursor/rules/"
    fi
    
    print_status "Rule files copied successfully"
}

# Function to create project-specific configuration files
create_project_config() {
    print_status "Creating project-specific configuration files..."
    
    # Create project-specific need-update file
    cat > "$PROJECT_PATH/.cursor/rules/need-update-this-file-if-change-project-tree.mdc" << EOF
---
description: 
globs: 
alwaysApply: true
---
# Main objective: $PROJECT_NAME

ROOT_PATH on WSL Ubuntu: /home/<username>/__projects__

username: $USERNAME

project_id: $PROJECT_NAME
projet_path_root: $PROJECT_PATH
---

task_tree_id: main
EOF

    # Create empty auto_rule.mdc (will be generated by MCP)
    cat > "$PROJECT_PATH/.cursor/rules/auto_rule.mdc" << EOF

### DO NOT EDIT - THIS FILE IS AUTOMATICALLY GENERATED ###
# Last generated: $(date -Iseconds)

# --- Project: $PROJECT_NAME ---

### TASK CONTEXT ###
- **Project**: $PROJECT_NAME
- **Location**: $PROJECT_PATH
- **Status**: Initial setup

### ROLE: CODING_AGENT ###
- Ready for task assignment and context generation.

### OPERATING RULES ###
1. Follow project-specific requirements
2. Use MCP server for task management
3. Maintain code quality and standards

### --- END OF GENERATED RULES --- ###
EOF

    # Create empty tasks.json
    cat > "$PROJECT_PATH/.cursor/rules/tasks/default_id/$PROJECT_NAME/main/tasks.json" << EOF
{
  "tasks": [],
  "metadata": {
    "version": "1.0",
    "project_id": "$PROJECT_NAME",
    "task_tree_id": "main",
    "user_id": "default_id",
    "created_at": "$(date -Iseconds)",
    "last_updated": "$(date -Iseconds)"
  }
}
EOF

    print_status "Project-specific configuration files created"
}

# Function to update brain/projects.json
update_brain_projects() {
    print_status "Updating brain/projects.json..."
    
    # Create brain/projects.json for the new project
    cat > "$PROJECT_PATH/.cursor/rules/brain/projects.json" << EOF
{
  "$PROJECT_NAME": {
    "id": "$PROJECT_NAME",
    "name": "$PROJECT_NAME",
    "description": "AI-powered project with MCP server integration",
    "task_trees": {
      "main": {
        "id": "main",
        "name": "Main Tasks",
        "description": "Main task tree for $PROJECT_NAME"
      }
    },
    "registered_agents": {},
    "agent_assignments": {},
    "created_at": "$(date -Iseconds)"
  }
}
EOF

    # Also update the source project's brain file to include the new project
    if [ -f "$SOURCE_PROJECT/.cursor/rules/brain/projects.json" ]; then
        # Create a backup
        cp "$SOURCE_PROJECT/.cursor/rules/brain/projects.json" "$SOURCE_PROJECT/.cursor/rules/brain/projects.json.backup"
        
        # Add new project to existing brain file (simple append, could be improved with jq)
        python3 << EOF
import json
import os
from datetime import datetime

brain_file = "$SOURCE_PROJECT/.cursor/rules/brain/projects.json"
new_project = {
    "id": "$PROJECT_NAME",
    "name": "$PROJECT_NAME", 
    "description": "AI-powered project with MCP server integration",
    "path": "$PROJECT_PATH",
    "task_trees": {
        "main": {
            "id": "main",
            "name": "Main Tasks",
            "description": "Main task tree for $PROJECT_NAME"
        }
    },
    "registered_agents": {},
    "agent_assignments": {},
    "created_at": datetime.now().isoformat() + "Z"
}

try:
    with open(brain_file, 'r') as f:
        brain_data = json.load(f)
    
    brain_data["$PROJECT_NAME"] = new_project
    
    with open(brain_file, 'w') as f:
        json.dump(brain_data, f, indent=2)
    
    print("Brain file updated successfully")
except Exception as e:
    print(f"Error updating brain file: {e}")
EOF
    fi
    
    print_status "Brain projects file updated"
}

# Function to create CLAUDE.md for the new project
create_claude_md() {
    print_status "Creating CLAUDE.md for the new project..."
    
    cat > "$PROJECT_PATH/CLAUDE.md" << EOF
# Claude Code Project Configuration
User Identification:
   - You should assume that you are interacting with default_user
   - If you have not identified default_user, proactively try to do so.

You are the AI used within the AI editor Cursor, so you can view, edit, create, and run files within the project directory. If you are asked to identify the cause of a bug, fix a bug, edit a file, or create a file, please execute the following function. Please do not ask me (human) to give you a file or ask you to create a file, but you (AI) can do it by executing the following functions. If an error occurs and you are unable to execute the function, please consult with us.

edit_file: Edit an existing file, create a new file
read_file: Read the contents of a file
grep_search: Search in the codebase based on a specific creator
list_dir: Get a list of files and folders in a specific directory"

- ALWAYS edit file in small chunks
- ALWAYS read \`.cursor/rules/dhafnck_mcp.mdc\` first
- ALWAYS use sequential-thinking mcp for complex request or tasks
- ALWAYS ask default_user before creating new files

- Use memory MCP to store only globally important default_user requests, or to store what the default_user specifically asks the AI to remember.

- Fix root causes, not symptoms

- Detailed summaries without missing important details

- AI files config, rules in .cursor/rules/

- No root directory file creation without permission

- Respect project structure unless changes requested

- Monitor for requests that would exceed Pro plan token limits

- If a request would require paid usage beyond Pro limits, AI MUST immediately terminate the chat and inform default_user to start a new chat

---

when open claude:
- read \`$PROJECT_PATH/.cursor/rules/dhafnck_mcp.mdc\`
- read \`$PROJECT_PATH/.cursor/rules/agents.mdc\`
- read \`$PROJECT_PATH/.cursor/rules/memory.mdc\`
- read \`.cursor/rules/need-update-this-file-if-change-project-tree.mdc\`

when get_task() or next_task() : read \`.cursor/rules/auto_rule.mdc\`

when change project or change git branch: update .cursor/rules/need-update-this-file-if-change-project-tree.mdc

# important-instruction-reminders
Do what has been asked; nothing more, nothing less.
NEVER create files unless they're absolutely necessary for achieving your goal.
ALWAYS prefer editing an existing file to creating a new one.
NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.
EOF

    print_status "CLAUDE.md created for the new project"
}

# Function to copy MCP server configuration
copy_mcp_config() {
    print_status "Setting up MCP server configuration..."
    
    # Copy MCP-related files if they exist
    if [ -f "$SOURCE_PROJECT/mcp_project_template.json" ]; then
        cp "$SOURCE_PROJECT/mcp_project_template.json" "$PROJECT_PATH/"
        
        # Update the template with project-specific information
        sed -i "s/dhafnck_mcp_main/$PROJECT_NAME/g" "$PROJECT_PATH/mcp_project_template.json"
    fi
    
    # Create a project-specific MCP configuration note
    cat > "$PROJECT_PATH/MCP_SETUP_NOTES.md" << EOF
# MCP Server Setup Notes for $PROJECT_NAME

## Configuration
- Project ID: $PROJECT_NAME
- Project Path: $PROJECT_PATH
- MCP Server: dhafnck_mcp (shared across projects)

## Usage
1. The MCP server dhafnck_mcp is shared across all projects
2. Use the manage_project, manage_task, and manage_agent tools
3. All tasks are stored in .cursor/rules/tasks/default_id/$PROJECT_NAME/
4. Context files are auto-generated in .cursor/rules/contexts/default_id/$PROJECT_NAME/

## Commands
- Create tasks: Use manage_task tool with project_id="$PROJECT_NAME"
- Get tasks: Use manage_task("list", project_id="$PROJECT_NAME")
- Switch context: Auto-handled when tasks are retrieved

## File Structure
\`\`\`
$PROJECT_PATH/
├── .cursor/
│   └── rules/
│       ├── dhafnck_mcp.mdc          # Core MCP configuration
│       ├── agents.mdc               # Agent definitions
│       ├── memory.mdc               # Memory management
│       ├── auto_rule.mdc            # Auto-generated context
│       ├── brain/
│       │   └── projects.json        # Project registry
│       ├── tasks/
│       │   └── default_id/
│       │       └── $PROJECT_NAME/
│       │           └── main/
│       │               └── tasks.json
│       └── contexts/
│           └── default_id/
│               └── $PROJECT_NAME/
└── CLAUDE.md                        # Project instructions
\`\`\`
EOF

    print_status "MCP configuration setup completed"
}

# Function to set permissions
set_permissions() {
    print_status "Setting appropriate permissions..."
    
    # Make sure the project directory is accessible
    chmod -R 755 "$PROJECT_PATH"
    
    # Make rule files readable
    find "$PROJECT_PATH/.cursor/rules" -type f -exec chmod 644 {} \;
    
    print_status "Permissions set successfully"
}

# Function to validate setup
validate_setup() {
    print_status "Validating setup..."
    
    # Check essential files exist
    local essential_files=(
        ".cursor/rules/dhafnck_mcp.mdc"
        ".cursor/rules/agents.mdc"
        ".cursor/rules/memory.mdc"
        ".cursor/rules/need-update-this-file-if-change-project-tree.mdc"
        ".cursor/rules/auto_rule.mdc"
        ".cursor/rules/brain/projects.json"
        ".cursor/rules/tasks/default_id/$PROJECT_NAME/main/tasks.json"
        "CLAUDE.md"
    )
    
    local missing_files=()
    
    for file in "${essential_files[@]}"; do
        if [ ! -f "$PROJECT_PATH/$file" ]; then
            missing_files+=("$file")
        fi
    done
    
    if [ ${#missing_files[@]} -eq 0 ]; then
        print_status "✅ All essential files are present"
        return 0
    else
        print_error "❌ Missing files:"
        for file in "${missing_files[@]}"; do
            print_error "  - $file"
        done
        return 1
    fi
}

# Function to display completion summary
display_summary() {
    print_header
    echo -e "${GREEN}🎉 Project setup completed successfully!${NC}"
    echo ""
    echo -e "${BLUE}Project Details:${NC}"
    echo -e "  Name: $PROJECT_NAME"
    echo -e "  Path: $PROJECT_PATH"
    echo -e "  MCP Server: dhafnck_mcp (shared)"
    echo ""
    echo -e "${BLUE}Next Steps:${NC}"
    echo -e "  1. Open the project in Cursor: ${YELLOW}cursor $PROJECT_PATH${NC}"
    echo -e "  2. Claude will automatically load the configuration"
    echo -e "  3. Start creating tasks with MCP tools"
    echo -e "  4. Read MCP_SETUP_NOTES.md for detailed usage"
    echo ""
    echo -e "${BLUE}Key Files Created:${NC}"
    echo -e "  - CLAUDE.md (project instructions)"
    echo -e "  - .cursor/rules/ (AI configuration)"
    echo -e "  - MCP_SETUP_NOTES.md (usage guide)"
    echo ""
    echo -e "${GREEN}Setup completed in: $PROJECT_PATH${NC}"
    print_header
}

# Main execution
main() {
    print_header
    
    # Validate inputs
    validate_inputs "$@"
    
    # Create project structure
    create_project_structure
    
    # Copy rule files
    copy_rule_files
    
    # Create project-specific configs
    create_project_config
    
    # Update brain projects
    update_brain_projects
    
    # Create CLAUDE.md
    create_claude_md
    
    # Copy MCP config
    copy_mcp_config
    
    # Set permissions
    set_permissions
    
    # Validate setup
    if validate_setup; then
        display_summary
        exit 0
    else
        print_error "Setup validation failed. Please check the missing files."
        exit 1
    fi
}

# Run main function with all arguments
main "$@"