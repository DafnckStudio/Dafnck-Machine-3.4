---
description: 
globs: 
alwaysApply: true
---
# Main objectif : correct mcp dhafnck_mcp tools not detect
**Tip: Read the logic in cursor_agent to fix issues in dhafnck_mcp_main.

CONTINUE_AUTOMATIC_NEW_TASK : OFF
if CONTINUE_AUTOMATIC_NEW_TASK = OFF, terminate chat if task is completed

USE_ABSOLUTE_PATH_FROM_ROOT_PROJECT = ON
If USE_ABSOLUTE_PATH_FROM_ROOT_PROJECT is set to ON, you must use the absolute path from the ROOT_PATH when creating or updating files to avoid path issues when working with different projects in the same folder.

ROOT_PATH on WSL Ubuntu: /home/<username>/agentic-project

username : daihungpham

PLAN_ACTUAL : [migration_plan.md](mdc:.cursor/rules/migration_plan.md)



**See the full Multi-Agent Orchestration documentation:**
[.cursor/rules/02_AI-DOCS/MultiAgentOrchestration/README.mdc](mdc:.cursor/rules/02_AI-DOCS/MultiAgentOrchestration/README.mdc)

MUST follow [task-management.mdc](mdc:cursor_agent/.cursor/rules/task-management.mdc)

## Command executes: 
- MUST do when use terminal commande: try exit commande 
- when commande is longer than 10 sec force quit for see result

run terminal commande â†’
    â”œâ”€â”€ force quit if run more than 10s
    â””â”€â”€ see result

## Tools calls on chat need counter on background

## ðŸ“‹ **IMPORTANT: CONTEXT SYNCHRONIZATION**
- **Trigger**: Every time `get_task` or `do_next` is called via MCP server
- **Target File**: `.cursor/rules/auto_rule.mdc`
- **Purpose**: Provides precise, task-specific context and rules for AI assistant
- **When get_task is called**: AI assistant should ALWAYS check this file (main_objectif.mdc) for updated context
- **Auto-generated rules**: The `.cursor/rules/auto_rule.mdc` file is automatically updated with task-specific context
- **Context precision**: This ensures the AI has the most precise and relevant context for the current task
- **Role alignment**: AI behavior automatically adapts to the assigned role and current phase

## ðŸ”„ **AUTOMATIC AGENT ROLE SWITCHING**
- **Trigger**: Every time `get_task` or `do_next` is called via MCP server
- **Process**: System automatically extracts assignee from task and calls appropriate agent
- **Format**: All assignees use "@" prefix (e.g., `@coding_agent`, `@functional_tester_agent`)
- **Agent Call**: Automatically executes `call_agent(name_agent="agent_name")` (strips "@" prefix)
- **YAML Loading**: Loads specialized configuration from `cursor_agent/yaml-lib/[agent_name]/`
- **Role Switch**: AI adopts the appropriate expertise, behavior, and knowledge for the task
- **Primary Assignee**: Only the first assignee in the list triggers automatic switching
- **Documentation**: See [.cursor/rules/02_AI-DOCS/MultiAgentOrchestration/Agent_Auto_Switch_Workflow.mdc](mdc:.cursor/rules/02_AI-DOCS/MultiAgentOrchestration/Agent_Auto_Switch_Workflow.mdc) for complete details

### Ensures context files is relative with task and subtask
[contextmaster.mdc](mdc:.cursor/rules/02_AI-DOCS/TaskManagement/contextmaster.mdc) : ALWAYS trigger after complete task or subtask

## Use MCP Server dhafnck_mcp when possible 
MUST follow [dhafnck_mcp_Workflow.mdc](mdc:.cursor/rules/02_AI-DOCS/TaskManagement/dhafnck_mcp_Workflow.mdc)

see [dhafnck_mcp_MCP_Server_Documentation.mdc](mdc:cursor_agent/.cursor/rules/dhafnck_mcp_MCP_Server_Documentation.mdc) for more details

- ALWAYS use the dhafnck_mcp MCP server for task operations
- Use dhafnck_mcp MCP to manage [tasks.json](mdc:.cursor/rules/tasks/tasks.json)
- ALWAYS use the MCP server first; NEVER access `.cursor/rules/tasks/tasks.json` directly unless the user requests it (AI does not have permission)

## ðŸŽ¯ **AUTO_RULE.MDC GENERATION AUTOMATIC** 
don't edit this file by ai, it generate automatic on task management

## TEST MUST to activate virtual environment
cursor_agent/.venv

